# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jGsoEawIHFPDmwmCDxXsy2ArDyoLfQAp
"""

# CodeGrade Tag Init1

from google.colab import drive
drive.mount('/content/drive')

"""Import Libraries"""

# Import Necessary Libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16, InceptionV3, ResNet50
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout, GlobalAveragePooling2D
from tensorflow.keras.optimizers import RMSprop
from sklearn.model_selection import train_test_split
import os
import shutil
import random

""" Data Preprocess"""

# Define paths
dataset_dir = '/content/drive/MyDrive/Archive'
train_data_dir = '/content/drive/MyDrive/Archive/Training'
test_data_dir = '/content/drive/MyDrive/Archive/Testing'

# Create directories if they don't exist
os.makedirs(train_data_dir, exist_ok=True)
os.makedirs(test_data_dir, exist_ok=True)

# Split data into training and testing sets
for category in os.listdir(dataset_dir):
    category_path = os.path.join(dataset_dir, category)
    if os.path.isdir(category_path):
        images = [f for f in os.listdir(category_path) if os.path.isfile(os.path.join(category_path, f))]
        if len(images) > 0:
            random.shuffle(images)
            selected_images = images[:25]  # Select only 25 images
            train_images, test_images = train_test_split(selected_images, test_size=0.2, random_state=42)

            os.makedirs(os.path.join(train_data_dir, category), exist_ok=True)
            os.makedirs(os.path.join(test_data_dir, category), exist_ok=True)

            for img in train_images:
                shutil.copy(os.path.join(category_path, img), os.path.join(train_data_dir, category, img))

            for img in test_images:
                shutil.copy(os.path.join(category_path, img), os.path.join(test_data_dir, category, img))

# Image data generators
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# Training data generator
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(224, 224),  # resize images to a smaller size
    batch_size=16,  # reduce batch size
    class_mode='categorical'
)

# Testing data generator
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(224, 224),  # resize images to a smaller size
    batch_size=16,  # reduce batch size
    class_mode='categorical'
)

"""Image Data Generators

Create Model Function
"""

# Function to create model
def create_model(base_model):
    model = Sequential([
        base_model,
        GlobalAveragePooling2D(),
        Dense(256, activation='relu'),
        Dense(4, activation='softmax')  # Assuming 4 classes
    ])

    optimizer = RMSprop(learning_rate=0.0001)

    model.compile(optimizer=optimizer,
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])

    return model

"""Create Model Function"""

# Instantiate models
vgg16_base = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
inception_base = InceptionV3(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
resnet_base = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

vgg16_model = create_model(vgg16_base)
inception_model = create_model(inception_base)
resnet_model = create_model(resnet_base)

"""Create Models"""

# Training function
def train_model(model, train_generator, test_generator, epochs=10):
    history = model.fit(train_generator,
                        steps_per_epoch=len(train_generator),
                        epochs=epochs,
                        validation_data=test_generator,
                        validation_steps=len(test_generator),
                        verbose=1)
    return history

# Train the models
history_vgg16 = train_model(vgg16_model, train_generator, test_generator)
history_inception = train_model(inception_model, train_generator, test_generator)
history_resnet = train_model(resnet_model, train_generator, test_generator)



# Assuming you have already created vgg16_model, inception_model, and resnet_model
# and you have defined your train_generator and test_generator

# Train the models
history_vgg16 = vgg16_model.fit(train_generator,
                                steps_per_epoch=len(train_generator),
                                epochs=10,
                                validation_data=test_generator,
                                validation_steps=len(test_generator),
                                verbose=1)

history_inception = inception_model.fit(train_generator,
                                        steps_per_epoch=len(train_generator),
                                        epochs=10,
                                        validation_data=test_generator,
                                        validation_steps=len(test_generator),
                                        verbose=1)

history_resnet = resnet_model.fit(train_generator,
                                  steps_per_epoch=len(train_generator),
                                  epochs=10,
                                  validation_data=test_generator,
                                  validation_steps=len(test_generator),
                                  verbose=1)
